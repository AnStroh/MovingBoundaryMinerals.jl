var documenterSearchIndex = {"docs":
[{"location":"man/security/#Security-Policy","page":"Security","title":"Security Policy","text":"","category":"section"},{"location":"man/security/","page":"Security","title":"Security","text":"We take security issues seriously. We appreciate all efforts to responsibly disclose any security issues and will make every effort to acknowledge contributions.","category":"page"},{"location":"man/security/#Supported-Versions","page":"Security","title":"Supported Versions","text":"","category":"section"},{"location":"man/security/","page":"Security","title":"Security","text":"The current stable release following the interpretation of semantic versioning (SemVer) used in the Julia ecosystem is supported with security updates.","category":"page"},{"location":"man/security/#Reporting-a-Vulnerability","page":"Security","title":"Reporting a Vulnerability","text":"","category":"section"},{"location":"man/security/","page":"Security","title":"Security","text":"To report a security issue, please use the GitHub Security Advisory \"Report a Vulnerability\" tab.","category":"page"},{"location":"man/security/","page":"Security","title":"Security","text":"We will send a response indicating the next steps in handling your report. After the initial reply to your report, we will keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.","category":"page"},{"location":"man/security/","page":"Security","title":"Security","text":"Please report security bugs in third-party modules directly to the person or team maintaining the module.","category":"page"},{"location":"man/security/","page":"Security","title":"Security","text":"Public notifications of vulnerabilities will be shared in community channels such as Slack.","category":"page"},{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"MOBILE.jl is an open-source project and we are very happy to accept contributions from the community. Please feel free to open issues or submit patches (preferably as pull requests) any time. For planned larger contributions, it is often beneficial to get in contact with one of the principal developers first (see Authors).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"MOBILE.jl and its contributions are licensed under the MIT license. As a contributor, you certify that all your contributions are in conformance with the Developer Certificate of Origin (Version 1.1), which is reproduced below.","category":"page"},{"location":"man/contributing/#Developer-Certificate-of-Origin-(Version-1.1)","page":"Contributing","title":"Developer Certificate of Origin (Version 1.1)","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The following text was taken from https://developercertificate.org:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.","category":"page"},{"location":"man/general_remarks/#General-remarks","page":"General Remarks","title":"General remarks","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"In this section we would like to make a few generally useful comments on the structure of the codes. ","category":"page"},{"location":"man/general_remarks/#Structure","page":"General Remarks","title":"Structure","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"We have tried to structure the individual files as uniformly as possible and to delete unnecessary parameters in the examples so that the user gets a good overview as quickly as possible and understands the individual examples well. Furthermore, the code works with SI units. Subsequently, users are asked to adjust their values or to change the units consequently at their own risk.Most of the codes are created to handle diffusion couples. In these codes we always refer to the left (phase A) and right side (phase B). If two numbers are stored in a variable, the first refers to the left material and the second to the right material. We have also stored generally valid codes in the maincodes folder. The examples can be found in the examples folder. Parameters in the maincodes folder have no physical meaning and act as placeholders such that the code works out of the box. In contrast, the examples show codes with real or non-dimensional values.","category":"page"},{"location":"man/general_remarks/#Compositions-and-concentrations","page":"General Remarks","title":"Compositions and concentrations","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"In our Julia package MOBILE.jl, we specify the concentration in mol. However, since we include any swelling or shrinking processes due to density differences, the composition can also be given in wt% or mol%. The respective parameters such as activation energy or densities must be corrected according to the utilized units. We want to emphasize, that consistence is extremely important here. The units of concentrations (e.g., mol) or compositions (e.g., wt%) are shortened at the end in the diffusion equation (Eq. 1). For more details: Appendices A and B in the related paper to this package (ADD REFERENCE!!!)","category":"page"},{"location":"man/general_remarks/#Temperature-and-distribution-coefficient","page":"General Remarks","title":"Temperature and distribution coefficient","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"In general, it is always possible to specify the temporal evolution of the distribution coefficient (KD) and the temperature as vectors. This makes it very easy to handle isothermal as well as non-isothermal problems and deal with constant or changing K_D values. Within the temperature and the KD vector, the first value defines the initial value. The last value defines value at the end of the simulation. If the first and the last entry are the same, the respective parameter is constant. ","category":"page"},{"location":"man/general_remarks/#Inner-and-outer-boundaries","page":"General Remarks","title":"Inner and outer boundaries","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"The inner boundary at the interface can either be described by the flux balance approach or with total mass balance. Outer boundary conditions at the edges of the modeling domain can be set to Dirichlet or Neumann conditions using BCout. ","category":"page"},{"location":"man/general_remarks/#Calculation-of-the-diffusion-coefficient","page":"General Remarks","title":"Calculation of the diffusion coefficient","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"There are two methods for calculating the diffusion coefficient in our package a) a constant diffusion coefficient is used by recording the respective values for the left and right side under the variable Di and b) if both values in Di are replaced with -1.0, D is calculated using the Arrhenius relationship. The same also applies to diffsion processes in single crystals. However, there is one exception. Within ChemicalStefanproblem.jl, the diffusivities are implemented as constant values.  Within example D1, we specify the diffusion coefficient for Fe-Mg in olivine and in the melt based on experimental values (Dohmen and Chakraborty, 2007a, b; Zhang and Cherniak, 2010) and effective evaluations (Crank, 1975). The user can customize the calculation method of the diffusion coefficients at any time.","category":"page"},{"location":"man/general_remarks/#References","page":"General Remarks","title":"References","text":"","category":"section"},{"location":"man/general_remarks/","page":"General Remarks","title":"General Remarks","text":"Crank, J.: The mathematics of diffusion, 2d ed., Clarendon Press, Oxford, [Eng], 414 pp., 1975. Dohmen, R. and Chakraborty, S.: Feâ€“Mg diffusion in olivine II: point defect chemistry, change of diffusion mechanisms and a model for calculation of diffusion coefficients in natural olivine, Phys. Chem. Miner., 34, 597â€“598, https://doi.org/10.1007/s00269-007-0185-3, 2007a. Dohmen, R. and Chakraborty, S.: Feâ€“Mg diffusion in olivine II: point defect chemistry, change of diffusion mechanisms and a model for calculation of diffusion coefficients in natural olivine, Phys. Chem. Miner., 34, 409â€“430, https://doi.org/10.1007/s00269-007-0158-6, 2007b. Zhang, Y. and Cherniak, D. J.: Diffusion in Minerals and Melts: Introduction, Rev. Mineral. Geochem., 72, 1â€“4, https://doi.org/10.2138/rmg.2010.72.1, 2010.","category":"page"},{"location":"man/digitalization/#Digitizing-the-phase-diagram-and-extracting-coefficients","page":"Digitization","title":"Digitizing the phase diagram and extracting coefficients","text":"","category":"section"},{"location":"man/digitalization/#Phase-diagrams","page":"Digitization","title":"Phase diagrams","text":"","category":"section"},{"location":"man/digitalization/","page":"Digitization","title":"Digitization","text":"The phase diagrams, which shows the composition of the system as a function of temperature, include all important information about chemical reactions between mineral assemblages. Therefore, it is necessary to describe the equilibrium conditions at the interface. Equations for the phase transformation lines contain all thermodynamically important data. These equations can be described by a quadratic equation (Eq. 1). Within our code, two transformation lines are always required to determine the composition of the components at the edges of a stable assemblage fields. The user needs to define coefficients (a, b, c) for both transformation lines as input prior to the start of the model.","category":"page"},{"location":"man/digitalization/#Work-flow","page":"Digitization","title":"Work flow","text":"","category":"section"},{"location":"man/digitalization/","page":"Digitization","title":"Digitization","text":"We have used the PlotDigitizer.jl package in Julia (Stroh and Frasunkiewicz, 2025) (https://github.com/AnStroh/PlotDigitizer.jl, version v0.1.0) to digitize the phase diagram. A shortened version of the package can be found in the additionalcodes folder under digitizePlot.jl. The package can be used to digitize reaction lines and export the X-T coordinates. The coordinates can then be used to calculate the coefficients for the reaction lines. We provide a short guideline here. First, the user defines the pathway of the image of the phase diagram (.png or .jpg file) as a variable. It is important that the image only shows the phase diagram (like here: examples\\Examplesphasediagram\\OlPhasediagramwithoutframework.png) and has no border. The phase diagram should show the composition on the x-axis and the temperature on the y-axis. Next, the user is asked for the limits of the axis, which should be defined in XBC and YBC. Afterwards, the user can run the function digitizePlot(XBC,YBC,filename) to set or delete points of lines, switch the line and extract coordinates. Using CalculateReactionLine.jl, the coefficient of: X(T)=aT^2+bT+c              (1) where X is the composition the phase transition, T is the temperature in K and a, b and c depict the coefficients defining the quadratic equation, which can be calculated with the least squares method and subsequently stored.  However, this step can be skipped, if the coefficients are known. In this case, the user can enter the coefficients directly in the main code.","category":"page"},{"location":"man/authors/#Authors","page":"Authors","title":"Authors","text":"","category":"section"},{"location":"man/authors/","page":"Authors","title":"Authors","text":"MOBILE.jl's development is coordinated by a group of principal developers, who are also its main contributors and who can be contacted in case of questions about MOBILE.jl. In addition, there are contributors who have provided substantial additions or modifications. Together, these two groups form \"MOBILE.jl.jl Authors\".","category":"page"},{"location":"man/authors/#Principal-Developers","page":"Authors","title":"Principal Developers","text":"","category":"section"},{"location":"man/authors/","page":"Authors","title":"Authors","text":"Annalena Stroh, Institute for Geosciences and Mainz Institute of Multiscale Modeling, Johannes Gutenberg University Mainz, Germany\nEvangelos Moulas, Institute for Geosciences and Mainz Institute of Multiscale Modeling, Johannes Gutenberg University Mainz, Germany","category":"page"},{"location":"man/authors/#Contributors","page":"Authors","title":"Contributors","text":"","category":"section"},{"location":"man/authors/","page":"Authors","title":"Authors","text":"The following people contributed major additions or modifications to MOBILE.jl and are listed in alphabetical order:","category":"page"},{"location":"man/authors/","page":"Authors","title":"Authors","text":"Pascal Aellig, Institute for Geosciences, Johannes Gutenberg University Mainz, Germany","category":"page"},{"location":"man/code_of_conduct/#code-of-conduct","page":"Code of Conduct","title":"Code of Conduct","text":"","category":"section"},{"location":"man/code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Contributor Covenant Code of ConductOur PledgeWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.Our StandardsExamples of behavior that contributes to a positive environment for our community include:Demonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall communityExamples of unacceptable behavior include:The use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional settingEnforcement ResponsibilitiesCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.ScopeThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.EnforcementInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to Annalena Stroh, Evangelos Moulas, or any other of the principal developers responsible for enforcement listed in Authors. All complaints will be reviewed and investigated promptly and fairly.All community leaders are obligated to respect the privacy and security of the reporter of any incident.Enforcement GuidelinesCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:1. CorrectionCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.2. WarningCommunity Impact: A violation through a single incident or series of actions.Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.3. Temporary BanCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.4. Permanent BanCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.Consequence: A permanent ban from any sort of public interaction within the community.AttributionThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0, available at https://www.contributor-covenant.org/version/2/0/codeofconduct.html.Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.[homepage]: https://www.contributor-covenant.orgFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","category":"page"},{"location":"man/listfunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"man/listfunctions/","page":"List of functions","title":"List of functions","text":"Here an overview of all functions:","category":"page"},{"location":"man/listfunctions/#MOBILE.advect_interface_regrid!-NTuple{8, Any}","page":"List of functions","title":"MOBILE.advect_interface_regrid!","text":"advect_interface_regrid!(Ri, V_ip, dt, x_left, x_right, C_left, C_right, nr)\n\nUpdate the interface position and calculate new grids based on the advection velocity. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nRi::Float64: Radii [interface    total length in [m].\nV_ip::Float64: Advection velocity in [m/s].\ndt::Float64: Time step in [s].\nx_left::Vector{Float64}: Left distance nodes in [m].\nx_right::Vector{Float64}: Right distance nodes in [m].\nC_left::Vector{Float64}: Composition values on the left nodes in [-].\nC_right::Vector{Float64}: Composition values on the right nodes in [-].\nnr::Vector{Int}: Resolution of the left and the right grid.\n\nReturns\n\nFl_regrid::Int: Flag indicating if regridding was performed (1) or not (0).\nx_left::Vector{Float64}: Updated left distance nodes.\nx_right::Vector{Float64}: Updated right distance nodes.\nC_left::Vector{Float64}: Updated composition values on the left nodes.\nC_right::Vector{Float64}: Updated composition values on the right nodes.\nnr::Vector{Int}: Updated resolution.\nRi::Float64: Updated radii [interface    total length].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.blocktest-NTuple{4, Any}","page":"List of functions","title":"MOBILE.blocktest","text":"blocktest(L1, R1, L2, R2)\n\nConstructs a block matrix and a block vector from given input matrices and vectors.\n\nArguments\n\nL1::Matrix: The first input matrix.\nR1::Vector: The first input vector.\nL2::Matrix: The second input matrix.\nR2::Vector: The second input vector.\n\nReturns\n\nLblock::SparseMatrixCSC: The block matrix constructed from L1 and L2.\nRblock::Vector: The block vector constructed from R1 and R2.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.calc_mass_err-Tuple{Any, Any}","page":"List of functions","title":"MOBILE.calc_mass_err","text":"calc_mass_err(Mass, Mass0)\n\nCalculate the mass error between the final mass Mass[end] and the initial mass Mass0.\n\nArguments\n\nMass::Vector: A vector containing the mass values in [-].\nMass0::Number: The initial mass value in [-].\n\nOutput\n\nErrM::Number: The calculated mass error.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.calc_mass_vol-NTuple{6, Any}","page":"List of functions","title":"MOBILE.calc_mass_vol","text":"calc_mass_vol(x_left, x_right, C_left, C_right, n, rho)\n\nCalculate the total mass based on the volume of the phase.\n\nArguments\n\nx_left::Float64: Left nodes in [m].\nx_right::Float64: Right nodes in [m].\nC_left::Vector{Float64}: Composition values of the left phase in [-].\nC_right::Vector{Float64}: Composition values of the right phase in [-].\nn::Int: Number which defines the geometry.\nrho::Vector{Float64}: Densities of the left and right phase [kg/mÂ³].\n\nReturns\n\nMtot::Float64: The total mass.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.calc_volume-Tuple{Any, Any, Any}","page":"List of functions","title":"MOBILE.calc_volume","text":"calc_volume(x1, x2, ndim)\n\nCalculation of all volumes. The density in both phases is constant. Subsequently, shrinking and expanding volumes are not considered.\n\nArguments\n\nx1: Nodes of the left phase.\nx2: Nodes of the right phase.\nndim: Geometry factor.\n\nReturns\n\nV1: Array of volumes for the left phase.\nV2: Array of volumes for the right phase.\ndVC: Array of total volume changes.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.calculate_density-NTuple{7, Any}","page":"List of functions","title":"MOBILE.calculate_density","text":"calculate_density(X_A, Y_A, rho_left, rho_right, C_leftB, C_rightB, T)\n\nCalculate the density of the phases at a given temperature T using interpolation in 2D.\n\nArguments\n\nX_A: X-axis values for interpolation (composition X in [-])\nY_A: Y-axis values for interpolation (temperature T in [K])\nrho_left: Left density values for interpolation in [kg/m^3]\nrho_right: Right density values for interpolation in [kg/m^3]\nC_leftB: Left composition values for interpolation in [-]\nC_rightB: Right composition values for interpolation in [-]\nT: Temperature at which to calculate the density in [K]\n\nReturns\n\nrho: Array of normalized densities\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.coeff_trans_line-Tuple{Any}","page":"List of functions","title":"MOBILE.coeff_trans_line","text":"coeff_trans_line(eq_values)\n\nExtracts coefficients for linear least squares from the input eq_values.\n\nArguments\n\neq_values: A 2x3 matrix containing the coefficients for the upper and lower transition lines.\n\nReturns\n\ncoeff_up: A 1x3 vector containing the coefficients for the upper transition line.\ncoeff_do: A 1x3 vector containing the coefficients for the lower transition line.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.composition-Tuple{Any, Any, Any}","page":"List of functions","title":"MOBILE.composition","text":"composition(coeff_up, coeff_do, T)\n\nCompute the composition of two components A and B at a given temperature.\n\nArguments\n\ncoeff_up::Vector{Float64}: Coefficients for the composition of component B.\ncoeff_do::Vector{Float64}: Coefficients for the composition of component A.\nT::Float64: Temperature at which to compute the composition in [K].\n\nReturns\n\nC_left::Float64: Composition of component A in [-].\nC_right::Float64: Composition of component B in [-].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.construct_matrix_fem-NTuple{9, Any}","page":"List of functions","title":"MOBILE.construct_matrix_fem","text":"construct_matrix_fem(x_left, x_right, C_left, C_right, D_l, D_r, dt, n, res)\n\nConstructs the global matrix for the FEM solver in a diffusion couple problem. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nx_left::Vector{Float64}: Left grid spatial points in [m].\nx_right::Vector{Float64}: Right grid spatial points in [m].\nC_left::Vector{Float64}: Composition values of the left phase in [-].\nC_right::Vector{Float64}: Composition values of the right phase in [-].\nD_l::Float64: Diffusion coefficient on the left side in [mÂ²/s].\nD_r::Float64: Diffusion coefficient on the right side in [mÂ²/s].\ndt::Float64: Time step in [s].\nn::Int: Geometry definition.\nres::Vector{Float64}: Resolution.\n\nReturns\n\nL_g::SparseMatrixCSC{Float64, Int}: Global stiffness matrix.\nR_g::Vector{Float64}: Global RHS vector.\nCo_l::Vector{Float64}: Stores left side composition values before the update.\nCo_r::Vector{Float64}: Stores right side composition values before the update.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.create_grid!-NTuple{4, Any}","page":"List of functions","title":"MOBILE.create_grid!","text":"create_grid!(Ri, nr, MRefin,verbose)\n\nCreate grid with or without variable spacing.Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nRi::Vector{Float64}: Initial radii [interface    total length] in [m].\nnr::Vector{Int}: Resolution vector.\nMRefin::Int: The refinement factor for the grid.\nverbose::Bool: A boolean indicating whether to print additional information.\n\nReturns\n\nx_left::Matrix{Float64}: Left nodes in [m].\nx_right::Matrix{Float64}: Right nodes in [m].\ndx1::Float64: The grid spacing on the left side in [m].\ndx2::Float64: The grid spacing on the right side in [m].\nx0::Matrix{Float64}: Initial grid spacing for the whole domain in [m].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.define_new_grid-NTuple{4, Any}","page":"List of functions","title":"MOBILE.define_new_grid","text":"define_new_grid(Ri, nr, Rfact, verbose)\n\nThis function defines a new grid based on the given parameters. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nRi: Radii [interface    total length] in [m].\nnr: Resolution of nodes on the left and right side.\nRfact: Grid refinement factor.\nverbose: A boolean indicating whether to print additional information.\n\nReturns\n\nRi: Radii [interface    total length] in [m].\nnr: Resolution of nodes on the left and right sides.\nx_left:Left nodes in [m].\nx_right: Right nodes in [m].\ndx_left: Left grid spacing in [m].\ndx_right: Right grid spacing in [m].\nSc_left: The scaling factor for the left side.\nSc_right: The scaling factor for the right side.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.fill_matrix!-NTuple{6, Any}","page":"List of functions","title":"MOBILE.fill_matrix!","text":"fill_matrix!(C, x, D, dt, ndim, nels)\n\nfillmatrix! function fills the global matrices Lg and R_g with the corresponding local matrices and vectors. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nC: Composition matrix in [-].\nx: Spatial grid  points.\nD: Diffusion coefficient in [mÂ²/s].\ndt: Time step in [s].\nndim: Geometry factor.\nnels: Number of elements.\n\nReturns\n\nL_g: Global LHS matrix.\nR_g: Global RHS vector.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.find_dt-NTuple{6, Any}","page":"List of functions","title":"MOBILE.find_dt","text":"find_dt(dx1, dx2, V_ip, D_l, D_r, CFL)\n\nFind the important time step dt based on the given parameters. The function calculates the time step dt based on the advection and diffusion properties of the system. Usually, advection time scale dtV are more dominat than diffusion time scale dtD. However, we included a dumping of dt, if dt>dtDto ensure the visibility of diffusion processes within the code. If the advection velocityV_ipis zero,dtD` is used instead. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\ndx1: Left spatial step size next to the interface.\ndx2: Right spatial step size next to the interface.\nV_ip: The advection velocity in [m/s].\nD_l: The diffusion coefficient on the left side in [mÂ²/s].\nD_r: The diffusion coefficient on the right side in [mÂ²/s].\nCFL: The Courant-Friedrichs-Lewy number.\n\nReturns\n\ndt: The calculated time step.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.interp2-NTuple{5, Any}","page":"List of functions","title":"MOBILE.interp2","text":"interp2(X1d, Y1d, Z2d, xi, yi)\n\nPerform 2D bilinear interpolation within bounds.\n\nArguments\n\nX1d::Vector: 1D monotonic (increasing) array representing the x-coordinates.\nY1d::Vector: 1D monotonic (increasing) array representing the y-coordinates.\nZ2d::Matrix: 2D array representing the values to be interpolated.\nxi::Vector: 1D array of x-values to interpolate.\nyi::Vector: 1D array of y-values to interpolate.\n\nReturns\n\nzi::Vector: 1D array of interpolated values corresponding to xi and yi.\n\nNotes\n\nThe lengths of xi and yi must be the same.\nThe values in xi and yi should be within the bounds of X1d and Y1d respectively.\nThe function uses 2D bilinear interpolation to compute the interpolated values.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.linear_interpolation_1D-Tuple{Any, Any, Any}","page":"List of functions","title":"MOBILE.linear_interpolation_1D","text":"linear_interpolation_1D(x, y, x_interp)\n\nPerform linear interpolation in 1D.\n\nArguments\n\nx::AbstractArray: The x coordinates of data points.\ny::AbstractArray: The y coordinates of data points.\nx_interp::Real: The x coordinate at which interpolation is desired.\n\nReturns\n\ny_interp::Real: The interpolated y value at x_interp.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.linspace_interface-NTuple{6, Any}","page":"List of functions","title":"MOBILE.linspace_interface","text":"linspace_interface(L1, L2, LIP, nx1, nx2, dX1_dXN)\n\nThis function calculates the adaptive grid depending on the position of the interface. Note: This function assumes that L1 < L2 and nx1 <= nx2. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nL1: Length of the left side in [m].\nL2: Length of the right side in [m].\nLIP: Interface position in [m].\nnx1: Number of nodes on the left side.\nnx2: Number of nodes on the right side.\ndX1_dXN: Ratio of the first grid spacing to the last grid spacing.\n\nReturns\n\nx_left: Array of nodes on the left side in [m].\nx_right: Array of nodes on the right side in [m].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.make_dx_right-Tuple{Any, Any, Any}","page":"List of functions","title":"MOBILE.make_dx_right","text":"make_dx_right(R, d1, n)\n\nConstructs an array containing the right side dx.\n\nArguments\n\nR::Number: The common ratio to scale all dx.\nd1::Number: The initial value of dx.\nn::Integer: Number of dx elements.\n\nReturns\n\ndx::Array{Float64,1}: Spatial distancenes for the right grid.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.newton_solver-NTuple{6, Any}","page":"List of functions","title":"MOBILE.newton_solver","text":"newton_solver(S, d, n, tol, max_iter, verbose)\n\nSolves the non-linear equation F(x) = (1 - x^n) / (1-x) - S / d using the Newton method.\n\nArguments\n\nS::Float64: The value of S in the equation (scaling factor).\nd::Float64: The value of d in the equation (e.g. spatial distance).\nn::Int: The value of n in the equation (exponential factor).\ntol::Float64: The tolerance for convergence.\nmax_iter::Int: The maximum number of iterations.\nverbose::Bool: Whether to print iteration information.\n\nReturns\n\nx::Float64: The solution to the equation.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.pchip-Tuple{Any, Any, Any}","page":"List of functions","title":"MOBILE.pchip","text":"pchip(x, y, X)\n\nShape-preserving piecewise Cubic Hermite Interpolating Polynomial.\n\nThis function computes the shape-preserving piecewise cubic Hermite interpolating polynomial for the given data points (x, y).\n\nArguments\n\nx::Vector: The x-coordinates of the data points.\ny::Vector: The y-coordinates of the data points.\nX::Vector: The x-coordinates at which to evaluate the interpolating polynomial.\n\nReturns\n\nP::Vector: The interpolated values at the points X.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.regrid!-NTuple{11, Any}","page":"List of functions","title":"MOBILE.regrid!","text":"regrid!(Fl_regrid, x_left, x_right, C_left, C_right, Ri, V_ip, nr, nmin, MRefin, verbose)\n\nRegrid the grid and interpolate the composition profiles. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nFl_regrid::Int: Flag indicating whether to regrid or not.\nx_left::Vector: Vector of left spatial nodes in [m].\nx_right::Vector: Vector of right spatial nodes in [m].\nC_left::Vector: Vector of left composition values in [-].\nC_right::Vector: Vector of right composition values in [-].\nRi::Vector: Radii [interface    total length] in [m].\nV_ip::Float64: Velocity of the interface in [m/s].\nnr::Vector: Resolution.\nnmin::Int: Minimum grid size.\nMRefin::Int: Refinement factor.\nverbose::Bool: Whether to print additional information.\n\nReturns\n\nx_left::Matrix: Matrix of left nodes in [m].\nx_right::Matrix: Matrix of right nodes in [m].\nC_left::Vector: Vector of left composition values in [-].\nC_right::Vector: Vector of right composition values in [-].\ndx1::Float64: Grid spacing at the left interface in [m].\ndx2::Float64: Grid spacing at the right interface in [m].\nnr::Vector: Updated resolution.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.set_inner_bc_Lasaga!-NTuple{15, Any}","page":"List of functions","title":"MOBILE.set_inner_bc_Lasaga!","text":"set_inner_bc_Lasaga!(Cl_i, beta, t, KD, D_r, D_l, D0, C_left, C_right, dx1, dx2, rho, L_g, R_g, nr)\n\nSet inner boundary conditions for the special case of major element diffusion in a diffusion couple (Lasaga, 1983). Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nCl_i::Float64: Initial composition on the left side in [-].\nbeta::Float64: Variable from Lasagas semi-analytical solution.\nt::Float64: Time in [s].\nKD::Float64: Distribution coefficient.\nD_r::Float64: Diffusion coefficient on the right side in [mÂ²/s].\nD_l::Float64: Diffusion coefficient on the left side in [mÂ²/s].\nD0::Array{Float64}: Pre-exponential factor within the equation for the diffusion coefficient (D` at T0).\nC_left::Array{Float64}: Array of concentrations on the left side in [-].\nC_right::Array{Float64}: Array of concentrations on the right side in [-].\ndx1::Float64: Grid spacing on the left side in [m].\ndx2::Float64: Grid spacing on the right side in [m].\nrho::Array{Float64}: Array of densities in [kg/mÂ³].\nL_g::Array{Float64}: Global left-hand side matrix.\nR_g::Array{Float64}: Global right-hand side vector.\nnr::Array{Int64}: Resolution.\n\nReturns\n\nL_g::Array{Float64}: Updated global left-hand side matrix.\nR_g::Array{Float64}: Updated global right-hand side vector.\nScF::Float64: Scaling factor.\nBC_left::Float64: Modelled left inner boundary condition (interface) in [-].\nBC_right::Float64: Modelled right inner boundary condition (interface) in [-].\nBC_left_Las::Float64: Left inner boundary condition following Lasaga (1983) in [-].\nBC_right_Las::Float64: Right inner boundary condition following Lasaga (1983) in [-].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.set_inner_bc_flux!-NTuple{10, Any}","page":"List of functions","title":"MOBILE.set_inner_bc_flux!","text":"set_inner_bc_flux!(L_g, R_g, KD, D_l, D_r, x_left, x_right, V_ip, rho, nr)\n\nSet the inner boundary conditions at the interface using fluxes. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nL_g::Matrix: The global matrix representing the system of equations (LHS).\nR_g::Vector: The global vector representing the right-hand side (RHS) of the system of equations.\nKD::Float64: The distribution coefficient.\nD_l::Float64: The diffusion coefficient on the left side in [mÂ²/s].\nD_r::Float64: The diffusion coefficient on the right side in [mÂ²/s].\nx_left::Vector: Left spatial nodes in [m].\nx_right::Vector: Right spatial nodes in [m].\nV_ip::Float64: The interface velocity in [m/s].\nrho::Vector: The density value in [kg/mÂ³].\nnr::Vector: Resolution.\n\nReturns\n\nL_g::Matrix: Updated LHS matrix.\nR_g::Vector: Updated RHS vector.\nScF::Float64: The scale factor used to reduce the condition number.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.set_inner_bc_mb!-NTuple{6, Any}","page":"List of functions","title":"MOBILE.set_inner_bc_mb!","text":"set_inner_bc_mb!(L_g, R_g, dVolC, Mtot, KD, nr)\n\nSet the inner boundary conditions at the interface using mass balance (MB). Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nL_g::Matrix: The global matrix representing the system of equations (LHS).\nR_g::Vector: The global vector representing the right-hand side (RHS) of the system of equations.\ndVolC::Vector: The volume change vector in [mÂ³].\nMtot::Float64: The total mass in [-].\nKD::Float64: The distribution coefficient.\nnr::Vector: Resolution.\n\nReturns\n\nL_g::Matrix: Updated LHS matrix.\nR_g::Vector: Updated RHS vector.\nScF::Float64: The scale factor used to reduce the condition number.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.set_inner_bc_stefan!-NTuple{5, Any}","page":"List of functions","title":"MOBILE.set_inner_bc_stefan!","text":"set_inner_bc_stefan!(L_g, R_g, C_left, C_right, nr)\n\nUses the Stefan boundary conditions to set the inner boundary conditions of the system of equations.\n\nArguments\n\nL_g::Matrix: The matrix representing the left-hand side of the system of equations.\nR_g::Vector: The vector representing the right-hand side of the system of equations.\nC_left::Vector: Composition of the left phase in [-].\nC_right::Vector: Composition of the right phase in [-].\nnr::Vector: Resolution of the model.\n\nReturns\n\nL_g::Matrix: The modified matrix L_g with Stefan conditions applied.\nR_g::Vector: The modified vector R_g with Stefan conditions applied.\nScF::Float64: Scaling factor for reducing the condition number of the matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.set_outer_bc!-NTuple{6, Any}","page":"List of functions","title":"MOBILE.set_outer_bc!","text":"set_outer_bc!(BCout, L_g, R_g, C_left, C_right, ScF)\n\nSet the outer boundary conditions (Dirichlet or Neumann) for the diffusion-advection problem. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nBCout: An array indicating the type of boundary condition at the outer boundaries.\nL_g: The global left-hand side matrix of the diffusion-advection problem.\nR_g: The global right-hand side vector of the diffusion-advection problem.\nC_left: Composition vector of the left side in [-].\nC_right: Composition vector of the right side in [-].\nScF: A scaling factor.\n\nDetails\n\nIf BCout[1] is equal to 1, the left outer boundary condition is Dirichlet, otherwise it is Neumann.\nIf BCout[2] is equal to 1, the right outer boundary condition is Dirichlet, otherwise it is Neumann.\n\nReturns\n\nL_g: The updated global left-hand side matrix.\nR_g: The updated global right-hand side vector.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.sinusoid_profile-NTuple{7, Any}","page":"List of functions","title":"MOBILE.sinusoid_profile","text":"sinusoid_profile(C0, n, L, D, t, G)\n\nCalculates a sinusoidal composition profile.\n\nThis function takes the initial composition C0, the number of sinusoidal modes n, the length of the system L, the diffusion coefficient D, the time t, and the amplitude G as input parameters. It calculates the composition profile at a given time t using the sinusoidal equation. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nC0: Initial composition at position x at `t = 0.0 in [-].\nn: Number of sinusoidal modes.\nL: Length of the modelling domain in [m].\nD: Diffusion coefficient in [mÂ²/s].\nt: Time in [s].\nG: Amplitude.\n\nReturns\n\nC: Composition profile at time t in [-].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.solve_soe-Tuple{Any, Any, Any}","page":"List of functions","title":"MOBILE.solve_soe","text":"solve_soe(L_g, R_g, res)\n\nSolves a system of equations.\n\nArguments\n\nL_g: The left-hand side matrix of the system of equations.\nR_g: The right-hand side vector of the system of equations.\nres: Resolution.\n\nReturns\n\nC_left: The updated composition vector of the left side in [-].\nC_right: The updated composition vector of the right side in [-].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.trapezoidal_integration-Tuple{Any, Any}","page":"List of functions","title":"MOBILE.trapezoidal_integration","text":"trapezoidal_integration(x, fx)\n\nTrapezoidal integration of fx over x.\n\nArguments\n\nx: Array of x values.\nfx: Array of f(x) values.\n\nReturns\n\nInt: The integrated value.\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.update_t_dependent_param!-NTuple{10, Any}","page":"List of functions","title":"MOBILE.update_t_dependent_param!","text":"update_t_dependent_param!(D0, Di, Ea1, Ea2, KD_ar, R, T_ar, t_ar, t, t_tot)\n\nUpdate the time dependent parameters D_l, D_r, KD, and T based on the given inputs. If Di = [-1.0 -1.0], the diffusion coefficient will be calculated based on the Arrhenius relation. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nD0::Vector{Float64}: Pre-exponential factor within the calculation of the diffusion coefficient in [mÂ²/s].\nDi::Vector{Float64}: Diffusion coefficients in [mÂ²/s].\nEa1::Float64: Activation energy for the left phase in [J/mol].\nEa2::Float64: Activation energy for the right phase in [J/mol].\nKD_ar::Vector{Float64}: Array of distributioncoefficients.\nR::Float64: Gas constant in [J/(mol*K)].\nT_ar::Vector{Float64}: Array of temperatures in [K].\nt_ar::Vector{Float64}: Array of time in [s].\nt::Float64: Current time in [s].\nt_tot::Float64: Total time in [s].\n\nReturns\n\nD_l::Float64: Updated diffusion coefficient for the left side in [mÂ²/s].\nD_r::Float64: Updated diffusion coefficient for the right side in [mÂ²/s].\nKD::Float64: Updated distribution coefficient.\nT::Float64: Updated temperature in [K].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.update_t_dependent_param_simple!-NTuple{8, Any}","page":"List of functions","title":"MOBILE.update_t_dependent_param_simple!","text":"update_t_dependent_param_simple!(D0, Di, Ea1, R, T_ar, t_ar, t, t_tot)\n\nUpdate the dependent parameters D and T based on the given inputs. If Di = [-1.0], the diffusion coefficient will be calculated based on the Arrhenius relation. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nD0: Pre-exponential factor within the calculation of the diffusion coefficient in [mÂ²/s].\nDi: Initial diffusion coefficient in [mÂ²/s].\nEa1: Activation energy in [J/mol].\nR: Gas constant in [J/(mol*K)].\nT_ar: Array of temperatures in [K].\nt_ar: Array of time in [s].\nt: Current time in [s].\nt_tot: Total time in [s].\n\nReturns\n\nD_l: Updated diffusion coefficient in [mÂ²/s].\nT: Updated temperature in [K].\n\n\n\n\n\n","category":"method"},{"location":"man/listfunctions/#MOBILE.update_time!-NTuple{4, Any}","page":"List of functions","title":"MOBILE.update_time!","text":"update_time!(t, dt, it, t_tot)\n\nUpdate the time and time  related variables t, dt, and it for a given total time t_tot. Units may differ from SI units if non-dimensionalisation has been performed.\n\nArguments\n\nt::Number: Current time in [s].\ndt::Number: Time step in [s].\nit::Integer: Time iterations.\nt_tot::Number: Total time in [s].\n\nReturns\n\nt::Number: Updated time in [s].\ndt::Number: Updated time step in [s].\nit::Integer: Updated time iterations.\n\n\n\n\n\n","category":"method"},{"location":"man/license/#license","page":"License","title":"License","text":"","category":"section"},{"location":"man/license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2025 Annalena Stroh, Evangelos Moulas and Authors (see Authors)Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"man/stefan_problem/#The-(chemical)-Stefan-problem","page":"Stefan Problem","title":"The (chemical) Stefan problem","text":"","category":"section"},{"location":"man/stefan_problem/","page":"Stefan Problem","title":"Stefan Problem","text":"The Stefan problem describes the movement of a reaction front in a thermodynamically constrained problem (e.g., the propagation of an ice front or the crystallization/resorption of minerals). We included the option to calculate the growth/dissolution of crystals based on a thermodynmically constrained data set (phase diagram). Here, we want to include a short describtion/additional information to the code.","category":"page"},{"location":"man/stefan_problem/#Input-parameters","page":"Stefan Problem","title":"Input parameters","text":"","category":"section"},{"location":"man/stefan_problem/","page":"Stefan Problem","title":"Stefan Problem","text":"Most of the input parameters are self-explaining. However, we want to mention, that this section we explain some more details to the single input parameters. The following input parameters are required: the initial position of the interface, which also determines the size of the left phase in the composition profile, the composition of the assemblage of interest CompInt. For the calculations, information on the start and end temperature (Tstart, Tstop) of the growth process as well as maximum and minimum temperatures (TMIN, TMAX) of the chosen section of the phase diagram are required. TMIN and TMAX are calculation parameters and define a temperature range in which the model can be used. They are not to be confused with the Tstart and Tstop in the model, whereby Tstar,Tstop âˆˆ [TMIN,TMAX]. All temperatures must be given in K. Coefficients for the phase transformation lines can be stored in the parameter eq_values. CompInt stores the composition of interest of the solid solution and therefore determines the start composition.","category":"page"},{"location":"man/stefan_problem/#Determining-the-interface-composition","page":"Stefan Problem","title":"Determining the interface composition","text":"","category":"section"},{"location":"man/stefan_problem/","page":"Stefan Problem","title":"Stefan Problem","text":"By digitizing two adjacent reaction lines of the phase diagram, we create a binary phase diagram to which we can apply our code. The reaction lines are described by two polynomials of the second degree (Eq. 1). X(T)=aT^2+bT+c              (1) We use these polynomials to determine the compositions of the two phases as a function of temperature. These concentrations are linked to the composition of the solid solution/assemblage via the Lever rule. The initial composition profile is a step function with two homogeneous parts referring to the two materials. The respective compositions are based on the data from the phase diagram for the composition of CompInt at the starting temperature Tstart. Using already given information, we calculate the length of the whole modelling domain (Eqs. 2 and 3).","category":"page"},{"location":"man/listexamples/#List-of-examples","page":"List of examples","title":"List of examples","text":"","category":"section"},{"location":"man/listexamples/","page":"List of examples","title":"List of examples","text":"Examples with the letter A refer to diffusion models in a single material, while examples with letter B and C refer to a diffusion couple. In B the model uses flux conditions to describe the interface whereas the models labelled C perform total mass balance calculations. Examples with letter D describe the thermodynamically constrained crystal growth/resorption. However, we have some more examples included, which show the stepwise increasing complexity of the codes. They have names without any reference letter.","category":"page"},{"location":"man/listexamples/#Examples","page":"List of examples","title":"Examples","text":"","category":"section"},{"location":"man/listexamples/","page":"List of examples","title":"List of examples","text":"A1: Intracrystalline diffusion within a planar crystal\nA2: Intracrystalline diffusion in a spherical crystal\nB1: Intercrystalline diffusion within a spherical diffusion couple\nB2: Diffusion within a spherical diffusion couple for the case of time-evolving  diffusivity\nB3: Major element diffusion within a diffusion couple\nB4: Spherical crystal growth due to Rayleigh fractionation in a growth and diffusion couple with D^A<<D^B\nB5: Growth of an alloy from a melt in a planar geometry\nB6:\nB7:\nC1: Spherical crystal growth due to Rayleigh fractionation in a growth and diffusion couple with D^A<<D^B\nC2:\nD1:\nSimple_Diff: Diffusion within a single crystall\nDiffcoupleno_interaction: Diffusion couple, which is build from 2 single crystals without an ion-exchange reaction\nDiffcoupleFlux: Diffusion couple with ion-exchange using flux balance at the interface\nDiffcoupleMB: Diffusion couple with ion-exchange using total mass balance at the interface\nDiffcoupleFlux_growth: Diffusion couple with ion-exchange using flux balance at the interface and simultaneous growth\nDiffcoupleMB_growth: Diffusion couple with ion-exchange using total mass balance at the interface and simultaneous growth","category":"page"},{"location":"#MOBILE.jl","page":"Home","title":"MOBILE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation page of the package Diffusion coupled growth.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MOBILE.jl is not yet registered and can be added as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"https://github.com/AnStroh/MOBILE.jl.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n\n(@v1.10) pkg> add https://github.com/AnStroh/MOBILE.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Install from a specific branch\nHowever, as the API is changing and not every new feature leads to a new release, one can also clone the main branch of the repository:add https://github.com/AnStroh/MOBILE.jl.git#main","category":"page"},{"location":"","page":"Home","title":"Home","text":"After installation, you can test the package by running the following commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MOBILE\n\njulia> ]\n\n(@v1.10) pkg> test MOBILE","category":"page"}]
}
